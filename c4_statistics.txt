• Lines of code (LOC) for the entire program and for individual functions &&  • Number of functions and their sizes (in LOC)  (Using Lizard)

- Total nloc: 486

- 4 Functions:

- {next() : 84 : lines 48-132 || expr() : 147 : lines 134-282 ||  stmt() : 47 : lines 284-331 || main() : 181 : lines 333-528}

• Cyclomatic complexity of each function. (Using Lizard)

- {next() : 85 || expr() : 91 ||  stmt() : 15 || main() : 100}

• Number of global variables and their usage. (using ctags)

Global Variables (total of 14):

data             variable     17 c4.c             *data; // data/bss pointer
debug            variable     28 c4.c             debug; // print executed instructions
e                variable     19 c4.c             int *e, *le, // current position in emitted code
id               variable     20 c4.c             *id, // currently parsed identifier
ival             variable     23 c4.c             ival, // current token value
le               variable     19 c4.c             int *e, *le, // current position in emitted code
line             variable     26 c4.c             line, // current line number
loc              variable     25 c4.c             loc, // local variable offset
lp               variable     16 c4.c             char *p, *lp, // current position in source code
p                variable     16 c4.c             char *p, *lp, // current position in source code
src              variable     27 c4.c             src, // print source and assembly flag
sym              variable     21 c4.c             *sym, // symbol table (simple list of identifiers)
tk               variable     22 c4.c             tk, // current token
ty               variable     24 c4.c             ty, // current expression type

The global variables in the code are used for variables that need to be accessed through multiple functions, for example flags that are used throughout the code.

• Number of unique tokens and their frequency. 

Tokens  ||  occurrences

Num     ||  8
Fun     ||  3 
Sys     ||  3 
Glo     ||  3 
Loc     ||  7 
Id      ||  10 
Char    ||  8 
Else    ||  2 
Enum    ||  2 
If      ||  2 
Int     ||  8 
Return  ||  2 
Sizeof  ||  2 
While   ||  3 
Assign  ||  13 
Cond    ||  4 
Lor     ||  3 
Lan     ||  4 
Or      ||  4 
Xor     ||  4 
And     ||  5 
Eq      ||  4 
Ne      ||  3 
Lt      ||  5 
Gt      ||  3 
Le      ||  3 
Ge      ||  3 
Shl     ||  7 
Shr     ||  3 
Add     ||  6 
Sub     ||  4 
Mul     ||  11 
Div     ||  3 
Mod     ||  3 
Inc     ||  18 
Dec     ||  4 
Brak    ||  3 

• Number of branches, loops, and their nesting levels.

- The CNN value represents the level of branching and loops.
- A higher CNN means the code is more complex. Higher complexity means more branches and loops.
- The nesting level for our functions is very high, considering a CNN of 10-20 is deemed relativly complex, and anything above 51 is of high risk 
 and unmanageable (McCabe complexity Metric) Whereas our code has a cnn of 15-100 meaning our nesting levels are very high on average.

source: https://help.klocwork.com/2023/en-us/concepts/mccabecyclomaticcomplexity.htm

• Memory usage patterns (e.g., stack vs. heap allocation). 

- using valgrind (heap usage):

- Heap memory is dynamic memory allocated by the programmer
- 1.25 MB used from heap allocations. 
- 6 malloc calls, 5 allocating 256KB, 1 allocating 1KB
- the use of heap memory is high because the interpreter takes one large block then manages it instead of many smaller blocks.

-Leaks:
==428== LEAK SUMMARY:
==428==    definitely lost: 262,144 bytes in 1 blocks
==428==    indirectly lost: 0 bytes in 0 blocks
==428==      possibly lost: 0 bytes in 0 blocks
==428==    still reachable: 1,048,576 bytes in 4 blocks
==428==         suppressed: 0 bytes in 0 blocks

Variables in the code were not free'd properly after usage resulting in leaks for most allocated variables (used test cases can be seen in the input.c file)

- Stack memory is used by local variables, function calls and for usage of expressions. valgrind unable to give stack memory specifics.